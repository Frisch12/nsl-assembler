OutFile("Gcd.exe");
ShowInstDetails("show");
XPStyle("on");
RequestExecutionLevel("admin");

/*
  Modified from http://en.wikipedia.org/wiki/Binary_GCD_algorithm
*/
function gcd($u, $v)
{
  /* GCD(0,x) := x */
  if ($u == 0 || $v == 0)
    return $u | $v;

  /* Let $shift := lg K, where K is the greatest power of 2
  dividing both $u and $v. */
  for ($shift = 0; (($u | $v) & 1) == 0; $shift++)
  {
    $u >>= 1;
    $v >>= 1;
  }

  while (($u & 1) == 0)
    $u >>= 1;

  /* From here on, $u is always odd. */
  do
  {
    while (($v & 1) == 0)  /* Loop X */
      $v >>= 1;

    /* Now $u and $v are both odd, so diff($u, $v) is even.
    Let $u = min($u, $v), $v = diff($u, $v)/2. */
    if ($u < $v)
    {
      $v -= $u;
    }
    else
    {
      $diff = $u - $v;
      $u = $v;
      $v = $diff;
    }
    $v >>= 1;
  }
  while ($v != 0);

  return $u << $shift;
}

/*
  Modified from http://en.wikipedia.org/wiki/Binary_GCD_algorithm
*/
function gcdRecursive($u, $v)
{
  if ($u == $v)
    return $v;

  if ($u == 0)
    return $v;

  if ($v == 0)
    return $u;

  if ($u%2 == 0) // if $u is even
  {
    if ($v%2 == 0) // if $u and $v are even
      return (2*gcdRecursive($u/2, $v/2));

    // $u is even and $v is odd
    return gcdRecursive($u/2, $v);
  }

  if ($v%2 == 0) // if $u is odd and $v is even
  {
    return gcd($u, $v/2);
  }

  // both are odd
  if ($u>=$v)
    return gcdRecursive(($u-$v)/2, $v);

  return gcdRecursive(($v-$u)/2, $u);
}


section GCD()
{
  #define GCD1 7
  #define GCD2 14
  DetailPrint("gcd(".GCD1.", ".GCD2.") = ".gcd(GCD1, GCD2));
  DetailPrint("gcdRecursive(".GCD1.", ".GCD2.") = ".gcdRecursive(GCD1, GCD2));
}